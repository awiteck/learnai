swagger: "2.0"
info:
  version: "1.0.0"
  title: "LearnAI API"
  description: "API for LearnAI"
host: "api.learnai.com" # modify later
basePath: "/v1"
schemes:
- "https"

paths:
  /facts/next:
    get:
      summary: "Get next fact content"
      description: "Retrieve the next fact based on user interaction and preferences."
      parameters:
      - name: "preference"
        in: "query"
        type: "string"
        required: false
        description: "User preference based on button pressed."
      responses:
        200:
          description: "A fact object."
          schema:
            $ref: "#/definitions/fact"
        500:
          description: "Internal server error."

  /facts/{factId}/like:
    post:
      summary: "Like a fact"
      description: "Like a fact specified by its ID."
      parameters:
      - name: "factId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Like registered."
        404:
          description: "fact not found."
        500:
          description: "Internal server error."

  /facts/{factId}/dislike:
    post:
      summary: "Dislike a fact"
      description: "Dislike a fact specified by its ID."
      parameters:
      - name: "factId"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "Dislike registered."
        404:
          description: "fact not found."
        500:
          description: "Internal server error."

  /facts/{factId}/comments:
    post:
      summary: "Comment on a fact"
      description: "Post a comment on a fact specified by its ID."
      parameters:
      - name: "factId"
        in: "path"
        required: true
        type: "string"
      - name: "comment"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        201:
          description: "Comment posted."
        404:
          description: "fact not found."
        500:
          description: "Internal server error."

  /users/register:
    post:
      summary: "Register a new user"
      description: "Create a new user account with email and password."
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          required:
            - "email"
            - "password"
          properties:
            email:
              type: "string"
            password:
              type: "string"
      responses:
        201:
          description: "User registration successful."
        400:
          description: "Invalid input for registration."
        500:
          description: "Internal server error."

  /users/profile:
    post:
      summary: "Create or update user profile"
      description: "Create or update a user's profile information after registration."
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserProfile"
      responses:
        200:
          description: "User profile created or updated successfully."
        400:
          description: "Invalid user profile data."
        500:
          description: "Internal server error."

definitions:
  fact:
    type: "object"
    properties:
      id:
        type: "string"
      title:
        type: "string"
      body:
        type: "string"
      likes:
        type: "integer"
      dislikes:
        type: "integer"
      comments:
        type: "array"
        items:
          $ref: "#/definitions/Comment"

  Comment:
    type: "object"
    required:
      - "author"
      - "text"
    properties:
      author:
        type: "string"
      text:
        type: "string"

  UserProfile:
    type: "object"
    properties:
      userId:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      bio:
        type: "string"
      # Additional user profile fields can be added here
